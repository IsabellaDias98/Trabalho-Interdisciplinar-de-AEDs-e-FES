#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TEMP 100  // Define um tamanho padrão para strings

// Define a estrutura do Funcionario com vários campos usando typedef
typedef struct {
  char codigo[TEMP];
  char nome[TEMP];
  char telefone[TEMP];
  double salario;
  char cargo[TEMP];
} Funcionario;

// Função para limpar o buffer do stdin
void limparBuffer() {
  int c;
  while ((c = getchar()) != '\n' && c != EOF);
}

// Função para adicionar um novo funcionário
void adicionarFuncionario() {
  FILE *file;  // Declaração do ponteiro de arquivo
  Funcionario info;  // Declaração da estrutura Funcionario

  // Leitura e armazenamento do código do funcionário
  printf("Digite o código do funcionário: ");
  if (fgets(info.codigo, TEMP, stdin) == NULL) {
    printf("Erro na leitura do código.\n");
    return;
  }
  info.codigo[strcspn(info.codigo, "\n")] = '\0';  // Remove o '\n' do final da string

  // Leitura e armazenamento do nome do funcionário
  printf("Digite o nome do funcionário: ");
  if (fgets(info.nome, TEMP, stdin) == NULL) {
    printf("Erro na leitura do nome.\n");
    return;
  }
  info.nome[strcspn(info.nome, "\n")] = '\0';  // Remove o '\n' do final da string

  // Leitura e armazenamento do telefone do funcionário
  printf("Digite o telefone do funcionário: ");
  if (fgets(info.telefone, TEMP, stdin) == NULL) {
    printf("Erro na leitura do telefone.\n");
    return;
  }
  info.telefone[strcspn(info.telefone, "\n")] = '\0';  // Remove o '\n' do final da string

  // Leitura e armazenamento do salário do funcionário
  printf("Digite o salário do funcionário: ");
  if (scanf("%lf", &info.salario) != 1) {
    printf("Erro na leitura do salário.\n");
    limparBuffer();  // Limpa o buffer caso haja erro na leitura do salário
    return;
  }
  limparBuffer(); // Limpa o buffer após leitura do salário

  // Leitura e armazenamento do cargo do funcionário
  printf("Digite o cargo do funcionário (recepcionista, auxiliar de limpeza, garçom, gerente): ");
  if (fgets(info.cargo, TEMP, stdin) == NULL) {
    printf("Erro na leitura do cargo.\n");
    return;
  }
  info.cargo[strcspn(info.cargo, "\n")] = '\0';  // Remove o '\n' do final da string

  // Abre o arquivo em modo append binário
  file = fopen("arquivo.dat", "ab");
  if (file == NULL) {
    printf("Erro ao abrir o arquivo.\n");
    return;
  }

  // Escreve a estrutura do Funcionario no arquivo
  if (fwrite(&info, sizeof(Funcionario), 1, file) != 1) {
    printf("Erro ao escrever no arquivo.\n");
  } else {
    printf("Funcionário adicionado com sucesso!\n");
  }

  // Fecha o arquivo
  fclose(file);
}

int main() {
  adicionarFuncionario();  // Chama a função para adicionar um funcionário
  return 0;
}
